#+TITLE: My Personal Options
#+AUTHOR: Matthew L. Fidler
* ELPA Packages I use
#+begin_src emacs-lisp
  (setq my-lisp-packages
        (list 'magit 'xahk-mode 'yaoddmuse 'textmate-to-yas 'w32-browser 'setup-cygwin
          'smex 'r-autoyas 'ntcmd 'org-table-comment 'lib-requires 'linum-off
          'fold-dwim-org 'fold-dwim 'ess-smart-underscore 'el-autoyas 'cygwin-mount
          'auto-complete 'ac-R 'json 'org-cua-dwim 'nsis-mode
          'ido-ubiquitous 'ergoemacs-keybindings
          'auto-indent-mode))
  
  (dolist (package my-lisp-packages)
    (unless (package-installed-p package)
      (condition-case err
          (package-install package)
        (error (message "%s" err)))))
  
#+end_src
* Keyboard Bindings
** Ergoemacs
I the colemak keyboard.  I also use ergoemacs.
#+begin_src emacs-lisp :results silent
  (require 'ergoemacs-keybindings nil t)
  (when (featurep 'ergoemacs-keybindings)
    (ergoemacs-mode 1)
    (cua-mode 1))
  
#+end_src
*** Ergoemacs +smex
To use Ergoemacs with SMEX, Control-A needs to be redefined
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'smex)
    (define-key ergoemacs-keymap "\M-a" 'smex)
    (define-key ergoemacs-keymap "\M-A" 'smex-major-mode-commands))
  
#+END_SRC

*** Ergoemacs -- Please use regular expression searching
#+BEGIN_SRC emacs-lisp
  (define-key ergoemacs-keymap [remap isearch-forward] 'isearch-forward-regexp)
  (define-key ergoemacs-keymap [remap isearch-backward] 'isearch-backward-regexp)
#+END_SRC

*** Remove silly Ergoemacs keys.
I really don't think that =M-x= and =M-c= =M-z= are very useful since
the control variants do the /exact same thing/.  Silly.

#+BEGIN_SRC emacs-lisp
  (define-key ergoemacs-keymap "\M-c" nil)
  (define-key ergoemacs-keymap "\M-x" nil)
  (define-key ergoemacs-keymap "\M-z" nil)
#+END_SRC

Also this interferes with ESS-tracebug's default prefix key of =\M-c=

* Things I use
This is a list of the things that I use and would like to load:
#+begin_src emacs-lisp
  (mapc
   (lambda(item)
     (starter-kit-load (concat "starter-kit-" item ".org")))
   (list
    "lisp" "eshell" "ess" "org" "nxhtml" "cygwin" "latex"))
  
#+end_src

* Misc
** User Name
I like to have my user-name set.  It fixes some issues in Emacs.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Matthew L. Fidler")
(setq user-mail-address "matthew.fidler@gmail.com")
#+END_SRC
** RefTeX
I'm setting my ref-TeX to my database of articles
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliograph '("~/Work/Articles/generalOcular.bib"))
#+END_SRC
* IDO hacks
See http://www.emacswiki.org/emacs/InteractivelyDoThings
** Display Completions Vertically
I like the look.  I don't like the arrow keys not doing what I expect...
#+BEGIN_SRC emacs-lisp
  (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
  
  (defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)
#+END_SRC


** Preventing auto-searches unless called explicitly
#+BEGIN_SRC emacs-lisp
  ;; disable auto searching for files unless called explicitly
  (setq ido-auto-merge-delay-time 99999)
  
  (define-key ido-file-dir-completion-map (kbd "C-c C-s") 
    (lambda() 
      (interactive)
      (ido-initiate-auto-merge (current-buffer))))
#+END_SRC

* Emacs Speaks NONMEM
I use esn
#+BEGIN_SRC emacs-lisp
  (require 'esn-start nil t)
#+END_SRC

* Testing Out
